UNIT TEST 1: shuffle()
Testing shuffle():
Testing deck with 0 cards: 
Shuffle return = -1, expected -1
TEST SUCCESSFUL: Shuffling a deck with 0 cards returns error code
Testing with 2 players, Player 0, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 1 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 2 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 3 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 4 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 5 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 6 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 7 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 8 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 9 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 10 cards in hand.
TEST SUCCESSFUL: Shuffling results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 0, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 2 players, Player 1, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 0, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 1, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 3 players, Player 2, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 0, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 1, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 2, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
Testing with 4 players, Player 3, with 100 cards in hand.
TEST SUCCESSFUL: Shuffling 100 cards results in identical deck size
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same
TEST SUCCESSFUL: Number of cards is the same

SUCCESS: ALL TESTS PASSED

UNIT TEST 2
Testing isGameOver():
Testing deck with no empty stacks: 
isGameOver return = 0, expected 0
TEST SUCCESSFUL: Game does not end with no empty stacks

Testing deck with one (non-Province) empty stack: 
isGameOver return = 0, expected 1
TEST SUCCESSFUL: Game does not end with one empty stack

Testing deck with two (non-Province) empty stacks: 
isGameOver return = 0, expected 0
TEST SUCCESSFUL: Game does not end with two empty stacks

Testing deck with three (non-Province) empty stacks: 
isGameOver return = 1, expected 1
TEST SUCCESSFUL: Game ends with three empty stacks

Testing deck with nine (non-Province) empty stacks: 
isGameOver return = 1, expected 1
TEST SUCCESSFUL: Game ends with nine empty stacks

Testing deck with empty Province stack: 
isGameOver return = 1, expected 1
TEST SUCCESSFUL: Game ends with 0 Province cards


SUCCESS: ALL TESTS PASSED

UNIT TEST 3
Testing fullDeckCount():
Testing deck count when card is not present anywhere in deck/hand/discard: 
fullDeckCount return = 0, expected 0
TEST SUCCESSFUL: Deck count for non-present card is 0

Testing deck count when card is only present in deck: 
fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found at beginning of deck

fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found at end of deck

fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found in middle of deck

Testing deck count when card is only present in hand: 
fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found at beginning of hand

fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found at end of hand

fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found in middle of hand

Testing deck count when card is only present in discard pile: 
fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found at beginning of discard

fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found at end of discard

fullDeckCount return = 1, expected 1
TEST SUCCESSFUL: Single card found in middle of discard

Testing deck count with 1 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 3, expected 3
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 4, expected 4
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 5, expected 5
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 4, expected 4
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 5, expected 5
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 5, expected 5
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 1 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 4, expected 4
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 5, expected 5
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 5, expected 5
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 2 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 5, expected 5
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 3 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 6, expected 6
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 4 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 7, expected 7
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 5 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 8, expected 8
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 6 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 9, expected 9
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 7 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 10, expected 10
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 8 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 28, expected 28
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 11, expected 11
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 28, expected 28
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 28, expected 28
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 9 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 29, expected 29
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 1 in discard pile: 
fullDeckCount return = 12, expected 12
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 2 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 3 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 4 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 5 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 6 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 7 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 8 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 9 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 1 in hand, and 10 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 1 in discard pile: 
fullDeckCount return = 13, expected 13
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 2 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 3 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 4 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 5 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 6 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 7 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 8 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 9 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 2 in hand, and 10 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 1 in discard pile: 
fullDeckCount return = 14, expected 14
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 2 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 3 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 4 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 5 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 6 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 7 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 8 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 9 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 3 in hand, and 10 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 1 in discard pile: 
fullDeckCount return = 15, expected 15
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 2 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 3 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 4 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 5 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 6 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 7 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 8 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 9 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 4 in hand, and 10 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 1 in discard pile: 
fullDeckCount return = 16, expected 16
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 2 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 3 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 4 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 5 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 6 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 7 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 8 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 9 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 5 in hand, and 10 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 1 in discard pile: 
fullDeckCount return = 17, expected 17
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 2 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 3 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 4 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 5 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 6 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 7 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 8 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 9 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 6 in hand, and 10 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 1 in discard pile: 
fullDeckCount return = 18, expected 18
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 2 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 3 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 4 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 5 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 6 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 7 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 8 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 9 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 7 in hand, and 10 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 1 in discard pile: 
fullDeckCount return = 19, expected 19
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 2 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 3 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 4 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 5 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 6 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 7 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 8 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 9 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 8 in hand, and 10 in discard pile: 
fullDeckCount return = 28, expected 28
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 1 in discard pile: 
fullDeckCount return = 20, expected 20
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 2 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 3 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 4 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 5 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 6 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 7 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 8 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 9 in discard pile: 
fullDeckCount return = 28, expected 28
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 9 in hand, and 10 in discard pile: 
fullDeckCount return = 29, expected 29
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 1 in discard pile: 
fullDeckCount return = 21, expected 21
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 2 in discard pile: 
fullDeckCount return = 22, expected 22
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 3 in discard pile: 
fullDeckCount return = 23, expected 23
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 4 in discard pile: 
fullDeckCount return = 24, expected 24
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 5 in discard pile: 
fullDeckCount return = 25, expected 25
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 6 in discard pile: 
fullDeckCount return = 26, expected 26
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 7 in discard pile: 
fullDeckCount return = 27, expected 27
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 8 in discard pile: 
fullDeckCount return = 28, expected 28
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 9 in discard pile: 
fullDeckCount return = 29, expected 29
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard

Testing deck count with 10 in deck, 10 in hand, and 10 in discard pile: 
fullDeckCount return = 30, expected 30
TEST SUCCESSFUL: Correct sum returned between deck, hand, and discard


SUCCESS: ALL TESTS PASSED

UNIT TEST 4
Testing handCard():
Testing response when hand is empty: 
handCard() return = 4, expected -1 or error
TEST FAILED: handCard() indicates error when hand is empty

Testing response when hand position is invalid: 
handCart() return = 4, expected -1 or error
TEST FAILED: handCard() indicates error when hand position is invalid

Testing response when card is present in hand position: 
handCard return = 7, expected adventurer
TEST SUCCESSFUL: Correct card returned from beginning of hand

handCard return = 13, expected smithy
TEST SUCCESSFUL: Correct card returned from end of hand

handCard return = 17, expected minion
TEST SUCCESSFUL: Correct card returned from middle of hand


3/5 TESTS PASSED

CARD TEST 1: SMITHY
Testing Smithy:
Testing Smithy when deck contains at least 3 cards to draw:: 
Smithy return = 0, expected 0
TEST SUCCESSFUL: Smithy returns 0 when deck contains at least 3 cards to draw

Ending hand size = 7, expected 6
TEST FAILED: Smithy results in two net cards added to the hand size

Ending deck size = 6, expected 7
TEST FAILED: Smithy results in three less cards in the deck

Ending discard size = 10, expected 11
TEST FAILED: Smithy results in one card added to the discard

Ending hand size = 4, expected 4
TEST SUCCESSFUL: Smithy results in no change to other player's hand size

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Smithy results in no change to other player's deck size

Ending discard size = 10, expected 10
TEST SUCCESSFUL: Smithy results in no change to other player's discard size

Testing Smithy when deck contains less than 3 cards to draw, requiring a shuffle of the discard pile: 
Smithy return = 0, expected 0
TEST SUCCESSFUL: Smithy returns 0 when deck contains at least 3 cards to draw

Ending hand size = 7, expected 6
TEST FAILED: Smithy results in two net cards added to the hand size

Ending deck size = 8, expected 9
TEST FAILED: Smithy results in (deck size + discard pile size - 3) cards in the deck

Ending discard size = 0, expected 1
TEST FAILED: Smithy results in one card added to the discard

Ending hand size = 4, expected 4
TEST SUCCESSFUL: Smithy results in no change to other player's hand size

Ending deck size = 2, expected 2
TEST SUCCESSFUL: Smithy results in no change to other player's deck size

Ending discard size = 10, expected 10
TEST SUCCESSFUL: Smithy results in no change to other player's discard size


8/14 TESTS PASSED

CARD TEST 2: ADVENTURER
Adventurer return = 0, expected 0
TEST SUCCESSFUL: Adventurer returns 0 when deck contains at least 2 treasure cards

Ending hand size = 12, expected 11
TEST FAILED: Adventurer results in one net card added to the hand size

Ending deck size = 4, expected 4
TEST SUCCESSFUL: Adventurer results in less cards in the deck equal to 2 treasures and cards on top

Ending discard size = 7, expected 8
TEST FAILED: Adventurer results in increase to discard pile equal to 1 Adventurer and cards on top of treasures

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Adventurer results in no change to other player's hand size

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Adventurer results in no change to other player's deck size

Ending discard size = 3, expected 3
TEST SUCCESSFUL: Adventurer results in no change to other player's discard size

Testing Adventurer when treasure is split between deck and discard pile: 
Adventurer return = 0, expected 0
TEST SUCCESSFUL: Adventurer returns 0 when treasure cards are split between deck and discard

Ending hand size = 12, expected 11
TEST FAILED: Adventurer results in one net card added to the hand size

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Adventurer results in no change to other player's hand size

Ending deck size = 3, expected 3
TEST SUCCESSFUL: Adventurer results in no change to other player's deck size

Ending discard size = 3, expected 3
TEST SUCCESSFUL: Adventurer results in no change to other player's discard size

Testing Adventurer when deck and discard contain only one treasure card: 
Adventurer return = 0, expected 0
TEST SUCCESSFUL: Adventurer returns 0 when deck+discard contains only 1 treasure card

Ending hand size = 11, expected 10
TEST SUCCESSFUL: Adventurer results in 0 net cards added to the hand size

Ending deck size = 0, expected 0
TEST SUCCESSFUL: Adventurer results in 0 cards in the deck

Ending discard size = 5, expected 7
TEST FAILED: Adventurer results in increase to discard pile equal to 1 Adventurer and the previous deck

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Adventurer results in no change to other player's hand size

Ending deck size = 3, expected 3
TEST SUCCESSFUL: Adventurer results in no change to other player's deck size

Ending discard size = 3, expected 3
TEST SUCCESSFUL: Adventurer results in no change to other player's discard size


15/19 TESTS PASSED

CARD TEST 3: VILLAGE
Village return = 0, expected 0
TEST SUCCESSFUL: Village returns 0 when deck contains at least 1 card

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Village results in zero net cards added to the hand size

Ending deck size = 9, expected 9
TEST SUCCESSFUL: Village results in one less card in the deck

Ending discard size = 2, expected 3
TEST FAILED: Village results in one more card in the discard pile

Ending action count = 3, expected 3
TEST SUCCESSFUL: Village results in two additional actions

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Village results in no change to other player's hand size

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Village results in no change to other player's deck size

Ending discard size = 2, expected 2
TEST SUCCESSFUL: Village results in no change to other player's discard size

Village return = 0, expected 0
TEST SUCCESSFUL: Village returns 0 when deck is empty

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Village results in zero net cards added to the hand size

Ending deck size = 1, expected -1
TEST SUCCESSFUL: Village results in deck size equal to discard - 1

Ending discard size = 0, expected 1
TEST FAILED: Village results in one card in the discard pile

Ending action count = 3, expected 3
TEST SUCCESSFUL: Village results in two additional actions

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Village results in no change to other player's hand size

Ending deck size = 0, expected 0
TEST SUCCESSFUL: Village results in no change to other player's deck size

Ending discard size = 2, expected 2
TEST SUCCESSFUL: Village results in no change to other player's discard size


14/16 TESTS PASSED

CARD TEST 4: EMBARGO
Embargo return = 0, expected 0
TEST SUCCESSFUL: Embargo returns 0 when deck contains at least 1 card

Ending hand size = 9, expected 9
TEST SUCCESSFUL: Embargo results in one less card in hand

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Embargo results in an unchanged deck size

Ending discard size = 2, expected 3
TEST FAILED: Embargo results in one more card in the discard pile

Ending embargo count = 1, expected 1
TEST SUCCESSFUL: Embargo results in an incremented embargo status

Ending coin count = 2, expected 2
TEST SUCCESSFUL: Embargo results in an increase by 2 coins

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Embargo results in no change to other player's hand size

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Embargo results in no change to other player's deck size

Ending discard size = 2, expected 2
TEST SUCCESSFUL: Embargo results in no change to other player's discard size

Embargo return = 0, expected 0
TEST SUCCESSFUL: Embargo returns 0 when deck contains at least 1 card

Ending hand size = 9, expected 9
TEST SUCCESSFUL: Embargo results in one less card in hand

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Embargo results in an unchanged deck size

Ending discard size = 2, expected 3
TEST FAILED: Embargo results in one more card in the discard pile

Ending embargo count = 2, expected 2
TEST SUCCESSFUL: Embargo results in an incremented embargo status

Ending coin count = 2, expected 2
TEST SUCCESSFUL: Embargo results in an increase by 2 coins

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Embargo results in no change to other player's hand size

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Embargo results in no change to other player's deck size

Ending discard size = 2, expected 2
TEST SUCCESSFUL: Embargo results in no change to other player's discard size

Embargo return = 0, expected 0
TEST SUCCESSFUL: Embargo returns 0 when deck contains at least 1 card

Ending hand size = 9, expected 9
TEST SUCCESSFUL: Embargo results in one less card in hand

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Embargo results in an unchanged deck size

Ending discard size = 2, expected 3
TEST FAILED: Embargo results in one more card in the discard pile

Ending embargo count = 11, expected 11
TEST SUCCESSFUL: Embargo results in an incremented embargo status

Ending coin count = 2, expected 2
TEST SUCCESSFUL: Embargo results in an increase by 2 coins

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Embargo results in no change to other player's hand size

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Embargo results in no change to other player's deck size

Ending discard size = 2, expected 2
TEST SUCCESSFUL: Embargo results in no change to other player's discard size

Embargo return = -1, expected -1
TEST SUCCESSFUL: Embargo returns -1 when supply is empty

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Embargo results in unchanged hand size when supply is empty

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Embargo results in an unchanged deck size when supply is empty

Ending discard size = 2, expected 2
TEST SUCCESSFUL: Embargo results in an unchanged played card pile when supply is empty

Ending embargo count = 0, expected 0
TEST SUCCESSFUL: Embargo does not result in an incremented embargo status

Ending coin count = 2, expected 2
TEST SUCCESSFUL: Embargo results in an increase by 2 coins

Ending hand size = 10, expected 10
TEST SUCCESSFUL: Embargo results in no change to other player's hand size

Ending deck size = 10, expected 10
TEST SUCCESSFUL: Embargo results in no change to other player's deck size

Ending discard size = 2, expected 2
TEST SUCCESSFUL: Embargo results in no change to other player's discard size


33/36 TESTS PASSED

File 'dominion.c'
Lines executed:33.45% of 562
Branches executed:32.85% of 417
Taken at least once:26.38% of 417
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 40679 returned 100% blocks executed 100%
    40679:    8:int compare(const void* a, const void* b) {
    40679:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     2076:   10:    return 1;
    38603:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    10379:   12:    return -1;
    28224:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1124 returned 100% blocks executed 95%
     1124:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1124:   44:  SelectStream(1);
call    0 returned 100%
     1124:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1124:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1124:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    12364:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   123640:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   112400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1124:   73:  if (numPlayers == 2)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   74:    {
     1047:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       77:   77:  else if (numPlayers == 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   78:    {
       33:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       44:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1124:   87:  if (numPlayers == 2)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   88:    {
     1047:   89:      state->supplyCount[estate] = 8;
     1047:   90:      state->supplyCount[duchy] = 8;
     1047:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       77:   95:      state->supplyCount[estate] = 12;
       77:   96:      state->supplyCount[duchy] = 12;
       77:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1124:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1124:  102:  state->supplyCount[silver] = 40;
     1124:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    23604:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   187486:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:  109:	{
   175233:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10227:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     2248:  115:		  if (numPlayers == 2){ 
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     1047:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       77:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     9103:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10227:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   165006:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3493:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  139:    {
     2369:  140:      state->deckCount[i] = 0;
     9476:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     7107:  143:	  state->deck[i][j] = estate;
     7107:  144:	  state->deckCount[i]++;
        -:  145:	}
    18952:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    16583:  148:	  state->deck[i][j] = copper;
    16583:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3493:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  155:    {
     2369:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3493:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2369:  166:      state->handCount[i] = 0;
     2369:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    31472:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    30348:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1124:  182:  state->outpostPlayed = 0;
     1124:  183:  state->phase = 0;
     1124:  184:  state->numActions = 1;
     1124:  185:  state->numBuys = 1;
     1124:  186:  state->playedCardCount = 0;
     1124:  187:  state->whoseTurn = 0;
     1124:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6744:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5620:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1124:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1124:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2477 returned 100% blocks executed 100%
     2477:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2477:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2477:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        5:  210:    return -1;
     2472:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    30047:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    25103:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    25103:  216:    newDeck[newDeckPos] = state->deck[player][card];
    25103:  217:    newDeckPos++;
   105910:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
    80807:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    25103:  221:    state->deckCount[player]--;
        -:  222:  }
    27575:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    25103:  224:    state->deck[player][i] = newDeck[i];
    25103:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2472:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 5 returned 100% blocks executed 100%
        5:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 1010 returned 100% blocks executed 100%
     1010:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1010:  326:  int count = 0;
        -:  327:
    11075:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  329:    {
    10065:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -:  331:    }
        -:  332:
    11075:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  334:    {
    10065:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -:  336:    }
        -:  337:
    11040:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  339:    {
    10030:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -:  341:    }
        -:  342:
     1010:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 19 returned 100% blocks executed 100%
       19:  346:int whoseTurn(struct gameState *state) {
       19:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  405:	{
       14:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5649 returned 100% blocks executed 100%
     5649:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     5649:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       23:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
       18:  534:      state->deck[player][i] = state->discard[player][i];
       18:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     5644:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     5644:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5644:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5644:  576:    state->deckCount[player]--;
     5644:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     5648:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 11 returned 100% blocks executed 6%
       11:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  /*Some declarations removed due to refactor. No longer needed*/
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  //int index;
       11:  654:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       11:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
       11:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  //int drawntreasure=0;
        -:  660:  //int cardDrawn;
        -:  661:  //int z = 0;// this is the counter for the temp hand
       11:  662:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  663:    nextPlayer = 0;
        -:  664:  }
        -:  665:  
        -:  666:	
        -:  667:  //uses switch to select card and perform actions
       11:  668:  switch( card ) 
branch  0 taken 27%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 18%
branch  7 taken 18%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 36%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  669:    {
        -:  670:    case adventurer:
        3:  671:        return adventurerCardEffect(state, currentPlayer, temphand);
call    0 returned 100%
        -:  672:      /*while(drawntreasure<2){
        -:  673:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  674:	  shuffle(currentPlayer, state);
        -:  675:	}
        -:  676:	drawCard(currentPlayer, state);
        -:  677:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  678:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  679:	  drawntreasure++;
        -:  680:	else{
        -:  681:	  temphand[z]=cardDrawn;
        -:  682:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  683:	  z++;
        -:  684:	}
        -:  685:      }
        -:  686:      while(z-1>=0){
        -:  687:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  688:	z=z-1;
        -:  689:      }
        -:  690:      return 0;*/
        -:  691:     
        -:  692:			
        -:  693:    case council_room:
        -:  694:      //+4 Cards
    #####:  695:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  696:	{
    #####:  697:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  698:	}
        -:  699:			
        -:  700:      //+1 Buy
    #####:  701:      state->numBuys++;
        -:  702:			
        -:  703:      //Each other player draws a card
    #####:  704:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  705:	{
    #####:  706:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  707:	    {
    #####:  708:	      drawCard(i, state);
call    0 never executed
        -:  709:	    }
        -:  710:	}
        -:  711:			
        -:  712:      //put played card in played card pile
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:			
    #####:  715:      return 0;
        -:  716:			
        -:  717:    case feast:
        -:  718:      //gain card with cost up to 5
        -:  719:      //Backup hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  721:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  722:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  723:      }
        -:  724:      //Backup hand
        -:  725:
        -:  726:      //Update Coins for Buy
    #####:  727:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  728:      x = 1;//Condition to loop on
    #####:  729:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  730:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  731:	  if (DEBUG)
        -:  732:	    printf("None of that card left, sorry!\n");
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  736:	  }
        -:  737:	}
    #####:  738:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  739:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  740:
        -:  741:	  if (DEBUG){
        -:  742:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  743:	  }
        -:  744:	}
        -:  745:	else{
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  749:	  }
        -:  750:
    #####:  751:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  752:	  x = 0;//No more buying cards
        -:  753:
        -:  754:	  if (DEBUG){
        -:  755:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  756:	  }
        -:  757:
        -:  758:	}
        -:  759:      }     
        -:  760:
        -:  761:      //Reset Hand
    #####:  762:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  763:	state->hand[currentPlayer][i] = temphand[i];
    #####:  764:	temphand[i] = -1;
        -:  765:      }
        -:  766:      //Reset Hand
        -:  767:      			
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case gardens:
    #####:  771:      return -1;
        -:  772:			
        -:  773:    case mine:
    #####:  774:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
    #####:  776:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:		
    #####:  781:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  782:	{
    #####:  783:	  return -1;
        -:  784:	}
        -:  785:
    #####:  786:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  787:	{
    #####:  788:	  return -1;
        -:  789:	}
        -:  790:
    #####:  791:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  792:
        -:  793:      //discard card from hand
    #####:  794:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  795:
        -:  796:      //discard trashed card
    #####:  797:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  798:	{
    #####:  799:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  800:	    {
    #####:  801:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  802:	      break;
        -:  803:	    }
        -:  804:	}
        -:  805:			
    #####:  806:      return 0;
        -:  807:			
        -:  808:    case remodel:
    #####:  809:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  810:
    #####:  811:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  812:	{
    #####:  813:	  return -1;
        -:  814:	}
        -:  815:
    #####:  816:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  817:
        -:  818:      //discard card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  820:
        -:  821:      //discard trashed card
    #####:  822:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  823:	{
    #####:  824:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  825:	    {
    #####:  826:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  827:	      break;
        -:  828:	    }
        -:  829:	}
        -:  830:
        -:  831:
    #####:  832:      return 0;
        -:  833:		
        -:  834:    case smithy:
        2:  835:    	return smithyCardEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  836:      /*//+3 Cards
        -:  837:      for (i = 0; i < 3; i++)
        -:  838:	{
        -:  839:	  drawCard(currentPlayer, state);
        -:  840:	}
        -:  841:			
        -:  842:      //discard card from hand
        -:  843:      discardCard(handPos, currentPlayer, state, 0);
        -:  844:      return 0;*/
        -:  845:		
        -:  846:    case village:
        -:  847:      //+1 Card
        2:  848:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  849:			
        -:  850:      //+2 Actions
        2:  851:      state->numActions = state->numActions + 2;
        -:  852:			
        -:  853:      //discard played card from hand
        2:  854:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  855:      return 0;
        -:  856:		
        -:  857:    case baron:
    #####:  858:      state->numBuys++;//Increase buys by 1!
    #####:  859:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  860:	int p = 0;//Iterator for hand!
    #####:  861:	int card_not_discarded = 1;//Flag for discard set!
    #####:  862:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  863:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  864:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  865:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  866:	    state->discardCount[currentPlayer]++;
    #####:  867:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  868:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  869:	    }
    #####:  870:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  871:	    state->handCount[currentPlayer]--;
    #####:  872:	    card_not_discarded = 0;//Exit the loop
        -:  873:	  }
    #####:  874:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  875:	    if(DEBUG) {
        -:  876:	      printf("No estate cards in your hand, invalid choice\n");
        -:  877:	      printf("Must gain an estate if there are any\n");
        -:  878:	    }
    #####:  879:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  880:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  881:	      state->supplyCount[estate]--;//Decrement estates
    #####:  882:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  883:		isGameOver(state);
call    0 never executed
        -:  884:	      }
        -:  885:	    }
    #####:  886:	    card_not_discarded = 0;//Exit the loop
        -:  887:	  }
        -:  888:			    
        -:  889:	  else{
    #####:  890:	    p++;//Next card
        -:  891:	  }
        -:  892:	}
        -:  893:      }
        -:  894:			    
        -:  895:      else{
    #####:  896:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  897:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  898:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  899:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:	    isGameOver(state);
call    0 never executed
        -:  901:	  }
        -:  902:	}
        -:  903:      }
        -:  904:	    
        -:  905:      
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case great_hall:
        -:  909:      //+1 Card
    #####:  910:      drawCard(currentPlayer, state);
call    0 never executed
        -:  911:			
        -:  912:      //+1 Actions
    #####:  913:      state->numActions++;
        -:  914:			
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  917:      return 0;
        -:  918:		
        -:  919:    case minion:
        -:  920:      //+1 action
    #####:  921:      state->numActions++;
        -:  922:			
        -:  923:      //discard card from hand
    #####:  924:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  925:			
    #####:  926:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  927:	{
    #####:  928:	  state->coins = state->coins + 2;
        -:  929:	}
        -:  930:			
    #####:  931:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  932:	{
        -:  933:	  //discard hand
    #####:  934:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  935:	    {
    #####:  936:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  937:	    }
        -:  938:				
        -:  939:	  //draw 4
    #####:  940:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  941:	    {
    #####:  942:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  943:	    }
        -:  944:				
        -:  945:	  //other players discard hand and redraw if hand size > 4
    #####:  946:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  949:		{
    #####:  950:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  951:		    {
        -:  952:		      //discard hand
    #####:  953:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  954:			{
    #####:  955:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  956:			}
        -:  957:							
        -:  958:		      //draw 4
    #####:  959:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  960:			{
    #####:  961:			  drawCard(i, state);
call    0 never executed
        -:  962:			}
        -:  963:		    }
        -:  964:		}
        -:  965:	    }
        -:  966:				
        -:  967:	}
    #####:  968:      return 0;
        -:  969:		
        -:  970:    case steward:
    #####:  971:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  972:	{
        -:  973:	  //+2 cards
    #####:  974:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  975:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  976:	}
    #####:  977:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  978:	{
        -:  979:	  //+2 coins
    #####:  980:	  state->coins = state->coins + 2;
        -:  981:	}
        -:  982:      else
        -:  983:	{
        -:  984:	  //trash 2 cards in hand
    #####:  985:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  986:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  987:	}
        -:  988:			
        -:  989:      //discard card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case tribute:
    #####:  994:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  995:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  996:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  997:	  state->deckCount[nextPlayer]--;
        -:  998:	}
    #####:  999:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1000:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1001:	  state->discardCount[nextPlayer]--;
        -: 1002:	}
        -: 1003:	else{
        -: 1004:	  //No Card to Reveal
        -: 1005:	  if (DEBUG){
        -: 1006:	    printf("No cards to reveal\n");
        -: 1007:	  }
        -: 1008:	}
        -: 1009:      }
        -: 1010:	    
        -: 1011:      else{
    #####: 1012:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1013:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1014:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1015:	    state->deckCount[nextPlayer]++;
    #####: 1016:	    state->discard[nextPlayer][i] = -1;
    #####: 1017:	    state->discardCount[nextPlayer]--;
        -: 1018:	  }
        -: 1019:			    
    #####: 1020:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1021:	} 
    #####: 1022:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1024:	state->deckCount[nextPlayer]--;
    #####: 1025:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
        -: 1028:      }    
        -: 1029:		       
    #####: 1030:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1031:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1032:	state->playedCardCount++;
    #####: 1033:	tributeRevealedCards[1] = -1;
        -: 1034:      }
        -: 1035:
    #####: 1036:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1037:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1038:	  state->coins += 2;
        -: 1039:	}
        -: 1040:		    
    #####: 1041:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1042:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1043:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:	}
        -: 1045:	else{//Action Card
    #####: 1046:	  state->numActions = state->numActions + 2;
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case ambassador:
    #####: 1053:      j = 0;		//used to check if player has enough cards to discard
        -: 1054:
    #####: 1055:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1056:	{
    #####: 1057:	  return -1;				
        -: 1058:	}
        -: 1059:
    #####: 1060:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:
    #####: 1065:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1068:	    {
    #####: 1069:	      j++;
        -: 1070:	    }
        -: 1071:	}
    #####: 1072:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1073:	{
    #####: 1074:	  return -1;				
        -: 1075:	}
        -: 1076:
        -: 1077:      if (DEBUG) 
        -: 1078:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1079:
        -: 1080:      //increase supply count for choosen card by amount being discarded
    #####: 1081:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1082:			
        -: 1083:      //each other player gains a copy of revealed card
    #####: 1084:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
    #####: 1086:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1087:	    {
    #####: 1088:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1089:	    }
        -: 1090:	}
        -: 1091:
        -: 1092:      //discard played card from hand
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1094:
        -: 1095:      //trash copies of cards returned to supply
    #####: 1096:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1099:	    {
    #####: 1100:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1101:		{
    #####: 1102:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1103:		  break;
        -: 1104:		}
        -: 1105:	    }
        -: 1106:	}			
        -: 1107:
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case cutpurse:
        -: 1111:
    #####: 1112:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1113:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
    #####: 1115:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1116:	    {
    #####: 1117:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1118:		{
    #####: 1119:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1120:		    {
    #####: 1121:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1122:		      break;
        -: 1123:		    }
    #####: 1124:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1125:		    {
    #####: 1126:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1127:			{
        -: 1128:			  if (DEBUG)
        -: 1129:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1130:			}	
    #####: 1131:		      break;
        -: 1132:		    }		
        -: 1133:		}
        -: 1134:					
        -: 1135:	    }
        -: 1136:				
        -: 1137:	}				
        -: 1138:
        -: 1139:      //discard played card from hand
    #####: 1140:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1141:
    #####: 1142:      return 0;
        -: 1143:
        -: 1144:		
        -: 1145:    case embargo: 
        -: 1146:      //+2 Coins
        4: 1147:      state->coins = state->coins + 2;
        -: 1148:			
        -: 1149:      //see if selected pile is in play
        4: 1150:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1151:	{
        1: 1152:	  return -1;
        -: 1153:	}
        -: 1154:			
        -: 1155:      //add embargo token to selected supply pile
        3: 1156:      state->embargoTokens[choice1]++;
        -: 1157:			
        -: 1158:      //trash card
        3: 1159:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
        3: 1160:      return 0;
        -: 1161:		
        -: 1162:    case outpost:
        -: 1163:      //set outpost flag
    #####: 1164:      state->outpostPlayed++;
        -: 1165:			
        -: 1166:      //discard card
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case salvager:
    #####: 1171:	return salvagerCardEffect(state, currentPlayer, handPos, choice1);
call    0 never executed
        -: 1172:      /*//+1 buy
        -: 1173:      state->numBuys++;
        -: 1174:			
        -: 1175:      if (choice1)
        -: 1176:	{
        -: 1177:	  //gain coins equal to trashed card
        -: 1178:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1179:	  //trash card
        -: 1180:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1181:	}
        -: 1182:			
        -: 1183:      //discard card
        -: 1184:      discardCard(handPos, currentPlayer, state, 0);
        -: 1185:      return 0;*/
        -: 1186:		
        -: 1187:    case sea_hag:
    #####: 1188:	return seaHagCardEffect(state, currentPlayer);
call    0 never executed
        -: 1189:      /*for (i = 0; i < state->numPlayers; i++){
        -: 1190:	if (i != currentPlayer){
        -: 1191:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1192:	  state->discardCount[i]++;
        -: 1193:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1194:	}
        -: 1195:      }
        -: 1196:      return 0;*/
        -: 1197:		
        -: 1198:    case treasure_map:
    #####: 1199:	return treasureMapCardEffect(state, currentPlayer, handPos);
call    0 never executed
        -: 1200:      /*//search hand for another treasure_map
        -: 1201:      index = -1;
        -: 1202:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1203:	{
        -: 1204:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1205:	    {
        -: 1206:	      index = i;
        -: 1207:	      break;
        -: 1208:	    }
        -: 1209:	}
        -: 1210:      if (index > -1)
        -: 1211:	{
        -: 1212:	  //trash both treasure cards
        -: 1213:	  discardCard(handPos, currentPlayer, state, 1);
        -: 1214:	  discardCard(index, currentPlayer, state, 1);
        -: 1215:
        -: 1216:	  //gain 4 Gold cards
        -: 1217:	  for (i = 0; i < 4; i++)
        -: 1218:	    {
        -: 1219:	      gainCard(gold, state, 1, currentPlayer);
        -: 1220:	    }
        -: 1221:				
        -: 1222:	  //return success
        -: 1223:	  return 1;
        -: 1224:	}
        -: 1225:			
        -: 1226:      //no second treasure_map found in hand
        -: 1227:      return -1;*/
        -: 1228:    }
        -: 1229:	
    #####: 1230:  return -1;
        -: 1231:}
        -: 1232:
function discardCard called 7 returned 100% blocks executed 78%
        7: 1233:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1234:{
        -: 1235:	
        -: 1236:  //if card is not trashed, added to Played pile 
        7: 1237:  if (trashFlag < 1)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        -: 1238:    {
        -: 1239:      //add card to played pile
        4: 1240:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1241:      state->playedCardCount++;
        -: 1242:    }
        -: 1243:	
        -: 1244:  //set played card to -1
        7: 1245:  state->hand[currentPlayer][handPos] = -1;
        -: 1246:	
        -: 1247:  //remove card from player's hand
        7: 1248:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1249:    {
        -: 1250:      //reduce number of cards in hand
    #####: 1251:      state->handCount[currentPlayer]--;
        -: 1252:    }
        7: 1253:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1254:    {
        -: 1255:      //reduce number of cards in hand
    #####: 1256:      state->handCount[currentPlayer]--;
        -: 1257:    }
        -: 1258:  else 	
        -: 1259:    {
        -: 1260:      //replace discarded card with last card in hand
        7: 1261:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1262:      //set last card to -1
        7: 1263:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1264:      //reduce number of cards in hand
        7: 1265:      state->handCount[currentPlayer]--;
        -: 1266:    }
        -: 1267:	
        7: 1268:  return 0;
        -: 1269:}
        -: 1270:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1271:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1272:{
        -: 1273:  //Note: supplyPos is enum of choosen card
        -: 1274:	
        -: 1275:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1276:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:	
        -: 1281:  //added card for [whoseTurn] current player:
        -: 1282:  // toFlag = 0 : add to discard
        -: 1283:  // toFlag = 1 : add to deck
        -: 1284:  // toFlag = 2 : add to hand
        -: 1285:
    #####: 1286:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1287:    {
    #####: 1288:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1289:      state->deckCount[player]++;
        -: 1290:    }
    #####: 1291:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1292:    {
    #####: 1293:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1294:      state->handCount[player]++;
        -: 1295:    }
        -: 1296:  else
        -: 1297:    {
    #####: 1298:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1299:      state->discardCount[player]++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //decrease number in supply pile
    #####: 1303:  state->supplyCount[supplyPos]--;
        -: 1304:	 
    #####: 1305:  return 0;
        -: 1306:}
        -: 1307:
function updateCoins called 1124 returned 100% blocks executed 82%
     1124: 1308:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1309:{
        -: 1310:  int i;
        -: 1311:	
        -: 1312:  //reset coin count
     1124: 1313:  state->coins = 0;
        -: 1314:
        -: 1315:  //add coins for each Treasure card in player's hand
     6744: 1316:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1317:    {
     5620: 1318:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1319:	{
     4496: 1320:	  state->coins += 1;
        -: 1321:	}
     1124: 1322:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1323:	{
    #####: 1324:	  state->coins += 2;
        -: 1325:	}
     1124: 1326:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1327:	{
    #####: 1328:	  state->coins += 3;
        -: 1329:	}	
        -: 1330:    }	
        -: 1331:
        -: 1332:  //add bonus
     1124: 1333:  state->coins += bonus;
        -: 1334:
     1124: 1335:  return 0;
        -: 1336:}
        -: 1337:
function smithyCardEffect called 2 returned 100% blocks executed 100%
        2: 1338:int smithyCardEffect(struct gameState* state, int currentPlayer, int handPos){
        -: 1339:
        -: 1340:      //+3 Cards
        2: 1341:      int i = 0;
       10: 1342:      for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1343:	{
        8: 1344:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1345:	}
        -: 1346:			
        -: 1347:      //discard card from hand
        2: 1348:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1349:      return 0;
        -: 1350:
        -: 1351:}
        -: 1352:
function adventurerCardEffect called 3 returned 100% blocks executed 100%
        3: 1353:int adventurerCardEffect(struct gameState* state, int currentPlayer, int temphand[]){
        -: 1354:      
        3: 1355:      int z = 0;
        3: 1356:      int drawntreasure = 0;
       25: 1357:      while(drawntreasure<2){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       19: 1358:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        3: 1359:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1360:	}
       19: 1361:	drawCard(currentPlayer, state);
call    0 returned 100%
       19: 1362:	int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       19: 1363:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
        6: 1364:	  drawntreasure++;
        -: 1365:	else{
       13: 1366:	  temphand[z]=cardDrawn;
       13: 1367:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       13: 1368:	  z++;
        -: 1369:	}
        -: 1370:      }
       19: 1371:      while(z-1>=0){
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
       13: 1372:	state->discard[currentPlayer][++state->discardCount[currentPlayer]]=temphand[z-1]; // discard all cards in play that have been drawn
       13: 1373:	z=z-1;
        -: 1374:      }
        3: 1375:      return 0;
        -: 1376:
        -: 1377:
        -: 1378:}
        -: 1379:
function treasureMapCardEffect called 0 returned 0% blocks executed 0%
    #####: 1380:int treasureMapCardEffect(struct gameState* state, int currentPlayer, int handPos){
        -: 1381:      //search hand for another treasure_map
    #####: 1382:      int index = -1;
    #####: 1383:      int i = 0;
    #####: 1384:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1385:	{
    #####: 1386:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1387:	    {
    #####: 1388:	      index = i;
    #####: 1389:	      break;
        -: 1390:	    }
        -: 1391:	}
    #####: 1392:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1393:	{
        -: 1394:	  //trash both treasure cards
    #####: 1395:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1396:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1397:
        -: 1398:	  //gain 4 Gold cards
    #####: 1399:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1400:	    {
    #####: 1401:	      gainCard(gold, state, 0, currentPlayer);
call    0 never executed
        -: 1402:	    }
        -: 1403:				
        -: 1404:	  //return success
    #####: 1405:	  return 1;
        -: 1406:	}
        -: 1407:			
        -: 1408:      //no second treasure_map found in hand
    #####: 1409:      return -1;
        -: 1410:
        -: 1411:
        -: 1412:}
        -: 1413:
function seaHagCardEffect called 0 returned 0% blocks executed 0%
    #####: 1414:int seaHagCardEffect(struct gameState* state, int currentPlayer){
        -: 1415:
    #####: 1416:      int i = 0;
    #####: 1417:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1418:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1419:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			   
    #####: 1420:          state->deckCount[i]--;
    #####: 1421:	  state->discardCount[i]++;
    #####: 1422:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1423:	}
        -: 1424:      }
    #####: 1425:      return 0;
        -: 1426:
        -: 1427:}
        -: 1428:
function salvagerCardEffect called 0 returned 0% blocks executed 0%
    #####: 1429:int salvagerCardEffect(struct gameState* state, int currentPlayer, int handPos, int choice1){
        -: 1430:
        -: 1431:      //+1 buy
    #####: 1432:      state->numBuys++;
        -: 1433:			
    #####: 1434:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1435:	{
        -: 1436:	  //gain coins equal to trashed card
    #####: 1437:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1438:	  //trash card
    #####: 1439:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1440:	}
        -: 1441:			
        -: 1442:      //discard card
    #####: 1443:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1444:      return 0;
        -: 1445:
        -: 1446:}
        -: 1447:
        -: 1448:
        -: 1449:
        -: 1450:
        -: 1451:
        -: 1452:
        -: 1453://end of dominion.c
        -: 1454:
        -: 1455:
